public class MinHeap {
    private int[] heap;      // Array to store heap elements
    private int size;        // Current number of elements in heap

    public MinHeap(int capacity) {
        heap = new int[capacity];
        size = 0;
    }

    private int parent(int i) { return (i - 1) / 2; }
    private int leftChild(int i) { return 2 * i + 1; }
    private int rightChild(int i) { return 2 * i + 2; }

    public void insert(int val) {
        if (size == heap.length) {
            throw new IllegalStateException("Heap is full");
        }
        heap[size] = val;
        swim(size);
        size++;
    }

    private void swim(int i) {
        while (i > 0 && heap[parent(i)] > heap[i]) {
            swap(i, parent(i));
            i = parent(i);
        }
    }

    public int extractMin() {
        if (size == 0) {
            throw new IllegalStateException("Heap is empty");
        }
        int min = heap[0];
        heap[0] = heap[size - 1];
        size--;
        sink(0);
        return min;
    }

    private void sink(int i) {
        int smallest = i;
        int left = leftChild(i);
        int right = rightChild(i);

        if (left < size && heap[left] < heap[smallest]) {
            smallest = left;
        }
        if (right < size && heap[right] < heap[smallest]) {
            smallest = right;
        }        if (smallest != i) {
            swap(i, smallest);
            sink(smallest);
        }
    }

    public void sort() {
        int originalSize = size;
        for (int i = originalSize - 1; i >= 1; i--) {
            swap(0, i);
            size--;
            sink(0);
        }
        size = originalSize;  // Restore original heap size
    }

    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    public void printHeap() {
        for (int i = 0; i < size; i++) {
            System.out.print(heap[i] + " ");
        }
        System.out.println();
    }
}

//Amar MinHeap Corrected Code
public class MinHeap {
    private int elem_num;
    private int[] heap;
    public MinHeap(int capacity) {
        this.elem_num = 1;
        this.heap = new int[capacity+1];
    }
    public int parent(int i) {
        return (i/2);
    }
    public int left(int i) {
        return (2*i);
    }
    public int right(int i) {
        return (2*i + 1);
    }
    void Sort(){
        int temp = elem_num;
        for (int j = elem_num-1; j >= 2; j--) {
            swap(1, j);
            elem_num--;
            Sink(1);
        }
        elem_num = temp;
    }
    void Insert(int n){
        if(elem_num == heap.length){
            System.out.println("Heap is full");
            return;
        }
        else{
            heap[elem_num] = n;
            Swim(elem_num);
            elem_num++;
        }
    }
    void Swim(int idx){
        if(idx>1 && heap[parent(idx)]>heap[idx]){
            swap(parent(idx), idx);
            Swim(parent(idx));
        }
    }
    void Sink(int idx){
        int temp = idx;
        if(left(idx)< elem_num && heap[idx]>heap[left(idx)]){
            temp = left(idx);
        }
        if(right(idx)< elem_num && heap[idx]>heap[right(idx)]){
            temp = right(idx);
        }
        if(temp != idx){
            swap(idx, temp);
            Sink(temp);
        }
    }
    int ExtractMin(){
        if(elem_num <= 1){
            System.out.println("Heap is empty");
            return -1;
        }
        int min = heap[1];
        heap[1] = heap[elem_num-1];
        elem_num--;
        Sink(1);
        return min;
    }
    void swap(int i, int j){
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }
}

//Amar MaxHeap Code
public class MaxHeap {
    private int elem_num;
    private int[] heap;

    public MaxHeap(int capacity) {
        this.elem_num = 1;
        this.heap = new int[capacity + 1];  // 1-based indexing
    }

    public int parent(int i) {
        return (i / 2);
    }

    public int left(int i) {
        return (2 * i);
    }

    public int right(int i) {
        return (2 * i + 1);
    }

    void Sort() {
        int temp = elem_num;
        for (int j = elem_num - 1; j >= 2; j--) {
            swap(1, j);
            elem_num--;
            Sink(1);
        }
        elem_num = temp;
    }

    void Insert(int n) {
        if (elem_num == heap.length) {
            System.out.println("Heap is full");
            return;
        }
        heap[elem_num] = n;
        Swim(elem_num);
        elem_num++;
    }

    void Swim(int idx) {
        if (idx > 1 && heap[parent(idx)] < heap[idx]) {
            swap(parent(idx), idx);
            Swim(parent(idx));
        }
    }

    void Sink(int idx) {
        int temp = idx;
        if (left(idx) < elem_num && heap[idx] < heap[left(idx)]) {
            temp = left(idx);
        }
        if (right(idx) < elem_num && heap[temp] < heap[right(idx)]) {
            temp = right(idx);
        }
        if (temp != idx) {
            swap(idx, temp);
            Sink(temp);
        }
    }

    int extractMax() {
        if (elem_num <= 1) {
            System.out.println("Heap is empty");
            return -1;
        }
        int max = heap[1];
        heap[1] = heap[elem_num - 1];
        elem_num--;
        Sink(1);
        return max;
    }

    void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    // Optional: Utility method to print heap (for debugging)
    void printHeap() {
        for (int i = 1; i < elem_num; i++) {
            System.out.print(heap[i] + " ");
        }
        System.out.println();
    }
}
